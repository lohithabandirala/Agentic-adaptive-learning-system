"""
Test Google ADK Agent - Question Generation
"""
import requests
import json

BASE_URL = "http://localhost:3000/api"

def test_adk_agent():
    print("\n" + "="*60)
    print("🤖 TESTING GOOGLE ADK AGENT - QUESTION GENERATION")
    print("="*60)
    
    # Step 1: Register student
    print("\n📝 Step 1: Registering student...")
    student_response = requests.post(f"{BASE_URL}/students/register", json={
        "student_id": "adk_test_student",
        "name": "ADK Test Student",
        "email": "adk@test.com",
        "grade": 10
    })
    
    if student_response.status_code == 200:
        print("✅ Student registered successfully")
        student_data = student_response.json()
        print(f"   Student ID: {student_data['student']['student_id']}")
    else:
        print(f"❌ Failed to register student: {student_response.text}")
        return
    
    # Step 2: Start session
    print("\n🎯 Step 2: Starting assessment session...")
    session_response = requests.post(f"{BASE_URL}/sessions/start", json={
        "student_id": "adk_test_student",
        "name": "ADK Test Student",
        "grade": 10,
        "topic": "biology",
        "total_questions": 5
    })
    
    if session_response.status_code == 200:
        session_data = session_response.json()
        print("✅ Session started successfully")
        print(f"   Session ID: {session_data['session_id']}")
        session_id = session_data['session_id']
    else:
        print(f"❌ Failed to start session: {session_response.text}")
        return
    
    # Step 3: Generate question using ADK AGENT
    print("\n🤖 Step 3: Calling ADK Agent to generate question...")
    print("   (Watch Terminal 1 for agent tool calls!)")
    
    question_response = requests.post(f"{BASE_URL}/sessions/question/next", json={
        "session_id": session_id,
        "student_id": "adk_test_student",
        "topic": "biology",
        "emotion_data": {
            "emotion": "neutral",
            "stressLevel": 2,
            "emotionScores": {
                "neutral": 0.85,
                "happy": 0.10,
                "sad": 0.05
            },
            "frameCount": 50,
            "analysisDuration": 10
        },
        "question_number": 1
    })
    
    if question_response.status_code == 200:
        question_data = question_response.json()
        
        print("\n" + "="*60)
        print("✅ QUESTION GENERATED BY ADK AGENT!")
        print("="*60)
        
        # Check if ADK agent was used
        if question_data.get('adk_agent'):
            print("\n🤖 ADK Agent Status: ACTIVE ✅")
            print(f"⚙️  Agent Iterations: {question_data.get('iterations', 'N/A')}")
        else:
            print("\n⚠️  ADK Agent Status: FALLBACK (used direct API)")
        
        # Display question
        question = question_data.get('question', {})
        print(f"\n📚 Question:")
        print(f"   {question.get('question', 'N/A')}")
        
        print(f"\n📊 Options:")
        for i, option in enumerate(question.get('options', []), 1):
            print(f"   {chr(64+i)}. {option}")
        
        print(f"\n✅ Correct Answer: {question.get('correctAnswer', 'N/A')}")
        print(f"📈 Difficulty: {question.get('difficulty', 'N/A')}")
        print(f"🏷️  Topic: {question.get('topic', 'N/A')}")
        
        # Display agent reasoning
        reasoning = question_data.get('reasoning', 'No reasoning provided')
        print(f"\n🧠 Agent Reasoning:")
        print(f"   {reasoning[:200]}..." if len(reasoning) > 200 else f"   {reasoning}")
        
        print("\n" + "="*60)
        print("✅ ADK AGENT TEST COMPLETE!")
        print("="*60)
        
        # Verify analytics saved
        print("\n💾 Analytics should be saved to MongoDB:")
        print("   Collection: aianalyses")
        print("   Type: question_generation")
        print("   Check MongoDB Atlas to verify!")
        
    else:
        print(f"\n❌ Failed to generate question: {question_response.text}")

if __name__ == "__main__":
    try:
        # Check backend health
        print("\n🏥 Checking backend health...")
        health_response = requests.get(f"{BASE_URL}/health")
        if health_response.status_code == 200:
            print("✅ Backend is running!")
            print(f"   {health_response.json()}")
        else:
            print("❌ Backend is not responding!")
            print("   Make sure to run: node server.js")
            exit(1)
        
        # Run ADK agent test
        test_adk_agent()
        
    except requests.exceptions.ConnectionError:
        print("\n❌ ERROR: Cannot connect to backend!")
        print("   Make sure backend is running:")
        print("   1. Open Terminal 1")
        print("   2. cd backend")
        print("   3. node server.js")
        print("\n   Then run this test again.")
    except Exception as e:
        print(f"\n❌ ERROR: {str(e)}")
